// Copyright ©2013 The bíogo.bam Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package bam

import (
	"bytes"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"reflect"
	"testing"

	check "launchpad.net/gocheck"
)

var (
	bam    = flag.Bool("bam", false, "output failing bam data for inspection")
	allbam = flag.Bool("allbam", false, "output all bam data for inspection")
)

type failure bool

func (f failure) String() string {
	if f {
		return "fail"
	}
	return "ok"
}

func Test(t *testing.T) { check.TestingT(t) }

type S struct{}

var _ = check.Suite(&S{})

func (s *S) TestRead(c *check.C) {
	for i, t := range []struct {
		in     []byte
		header *Header
		lines  int
	}{
		{
			in:     bamHG00096_1000,
			header: headerHG00096_1000,
			lines:  1000,
		},
	} {
		br, err := NewReader(bytes.NewBuffer(t.in))
		c.Assert(err, check.Equals, nil)
		c.Check(br.Header(), check.DeepEquals, t.header)
		if !reflect.DeepEqual(br.Header(), t.header) {
			c.Check(br.Header().Refs(), check.DeepEquals, t.header.Refs())
			c.Check(br.Header().RGs(), check.DeepEquals, t.header.RGs())
			c.Check(br.Header().Progs(), check.DeepEquals, t.header.Progs())
			c.Check(br.Header().Comments, check.DeepEquals, t.header.Comments)
		}
		var lines int
		for {
			_, err := br.Read()
			if err != nil {
				c.Assert(err, check.Equals, io.EOF)
				break
			}
			lines++
		}
		c.Check(lines, check.Equals, t.lines)
		if ok := reflect.DeepEqual(br.Header(), t.header) && lines == t.lines; *bam && !ok || *allbam {
			bf, err := os.Create(fmt.Sprintf("read-%d-%s.bam", i, failure(!ok)))
			c.Assert(err, check.Equals, nil)
			bf.Write(t.in)
			bf.Close()
		}
	}
}

func (s *S) TestCloneHeader(c *check.C) {
	for _, h := range []*Header{
		headerHG00096_1000,
	} {
		c.Check(h, check.DeepEquals, h.Clone())
	}
}

func (s *S) TestRoundTrip(c *check.C) {
	for i, t := range []struct {
		in     []byte
		header *Header
		conc   int
		lines  int
	}{
		{
			in:     bamHG00096_1000,
			header: headerHG00096_1000,
			conc:   2,
			lines:  1000,
		},
	} {
		br, err := NewReader(bytes.NewBuffer(t.in))
		c.Assert(err, check.Equals, nil)

		var buf bytes.Buffer
		bw, err := NewWriter(&buf, br.Header().Clone(), t.conc)
		for {
			r, err := br.Read()
			if err != nil {
				c.Assert(err, check.Equals, io.EOF)
				break
			}
			bw.Write(r)
		}
		c.Assert(bw.Close(), check.Equals, nil)

		br, err = NewReader(bytes.NewBuffer(t.in))
		c.Assert(err, check.Equals, nil)
		brr, err := NewReader(&buf)
		c.Assert(err, check.Equals, nil)
		c.Check(brr.Header().String(), check.Equals, br.Header().String())
		c.Check(brr.Header(), check.DeepEquals, br.Header())
		if !reflect.DeepEqual(brr.Header(), br.Header()) {
			c.Check(brr.Header().Refs(), check.DeepEquals, br.Header().Refs())
			c.Check(brr.Header().RGs(), check.DeepEquals, br.Header().RGs())
			c.Check(brr.Header().Progs(), check.DeepEquals, br.Header().Progs())
			c.Check(brr.Header().Comments, check.DeepEquals, br.Header().Comments)
		}
		allOK := true
		for {
			r, err := br.Read()
			if err != nil {
				c.Assert(err, check.Equals, io.EOF)
			}
			rr, err := brr.Read()
			if err != nil {
				c.Assert(err, check.Equals, io.EOF)
				break
			}
			c.Check(rr, check.DeepEquals, r)
			if !reflect.DeepEqual(rr, r) {
				allOK = false
			}
		}
		if ok := reflect.DeepEqual(br.Header(), brr.Header()) && allOK; *bam && !ok || *allbam {
			bf, err := os.Create(fmt.Sprintf("roundtrip-%d-%s.bam", i, failure(!ok)))
			c.Assert(err, check.Equals, nil)
			bf.Write(t.in)
			bf.Close()
		}
	}
}

var (
	file = flag.String("bench.file", "", "file to read for benchmarking")
	conc = flag.Int("conc", 1, "sets the level of concurrency for compression")
)

func BenchmarkRead(b *testing.B) {
	if *file == "" {
		b.Skip("no file specified")
	}
	b.StopTimer()
	f, err := os.Open(*file)
	if err != nil {
		b.Fatalf("Open failed: %v", err)
	}
	br, err := NewReader(f)
	if err != nil {
		b.Fatalf("NewReader failed: %v", err)
	}
	b.StartTimer()

	for i := 0; i < b.N; i++ {
		for {
			_, err := br.Read()
			if err != nil {
				break
			}
		}
	}
	f.Close()
}

func BenchmarkWrite(b *testing.B) {
	b.StopTimer()
	br, err := NewReader(bytes.NewReader(bamHG00096_1000))
	if err != nil {
		b.Fatalf("NewReader failed: %v", err)
	}
	r, err := br.Read()
	if err != nil {
		b.Fatalf("Read failed: %v", err)
	}
	bw, err := NewWriter(ioutil.Discard, br.Header().Clone(), *conc)
	if err != nil {
		b.Fatalf("NewWriter failed: %v", err)
	}
	b.StartTimer()

	for i := 0; i < b.N; i++ {
		err = bw.Write(r)
		if err != nil {
			b.Fatalf("Write failed: %v", err)
		}
	}
}

func BenchmarkReadFile(b *testing.B) {
	if *file == "" {
		b.Skip("no file specified")
	}

	for i := 0; i < b.N; i++ {
		f, err := os.Open(*file)
		if err != nil {
			b.Fatalf("Open failed: %v", err)
		}
		br, err := NewReader(f)
		if err != nil {
			b.Fatalf("NewReader failed: %v", err)
		}
		for {
			_, err := br.Read()
			if err != nil {
				break
			}
		}
		f.Close()
	}
}

// The is to comparable to `time samtools view -b $file > /dev/null'.
func BenchmarkRoundtripFile(b *testing.B) {
	if *file == "" {
		b.Skip("no file specified")
	}

	for i := 0; i < b.N; i++ {
		f, err := os.Open(*file)
		if err != nil {
			b.Fatalf("Open failed: %v", err)
		}
		br, err := NewReader(f)
		if err != nil {
			b.Fatalf("NewReader failed: %v", err)
		}
		bw, err := NewWriter(ioutil.Discard, br.Header().Clone(), *conc)
		if err != nil {
			b.Fatalf("NewWriter failed: %v", err)
		}
		for {
			r, err := br.Read()
			if err != nil {
				break
			}
			err = bw.Write(r)
			if err != nil {
				b.Fatalf("Write failed: %v", err)
			}
		}
		f.Close()
	}
}

func (s *S) TestIssue3(c *check.C) {
	for _, test := range issue3 {
		br, err := NewReader(test)
		c.Assert(err, check.Equals, nil, check.Commentf("Failed to open BAM"))

		for {
			_, err := br.Read()
			if err != nil {
				c.Check(err, check.Equals, io.EOF)
				break
			}
		}
	}
}

var issue3 = []io.Reader{
	// Specific case posted at https://code.google.com/p/biogo/issues/detail?id=3#c6
	// edited to a minimal reproducer.
	bytes.NewReader([]byte{
		0x1f, 0x8b, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00,
		0x00, 0xff, 0x06, 0x00, 0x42, 0x43, 0x02, 0x00,
		0x61, 0x00, 0x73, 0x72, 0xf4, 0x65, 0x34, 0x62,
		0x60, 0x60, 0x70, 0xf0, 0x70, 0xe1, 0x0c, 0xf3,
		0xb3, 0x32, 0xd4, 0x33, 0xe0, 0x0c, 0xf6, 0xb7,
		0x4a, 0xce, 0xcf, 0x2f, 0x4a, 0xc9, 0xcc, 0x4b,
		0x2c, 0x49, 0xe5, 0x72, 0x08, 0x0e, 0xe4, 0x0c,
		0xf6, 0xb3, 0x8a, 0x2a, 0xb3, 0x8c, 0xf7, 0x73,
		0x34, 0x34, 0xe0, 0xf4, 0xf1, 0xb3, 0x32, 0xb1,
		0x30, 0x30, 0x33, 0xe2, 0x62, 0x04, 0xea, 0xe2,
		0x04, 0x62, 0x98, 0x0c, 0xc3, 0xbe, 0xdd, 0x0c,
		0x0c, 0x00, 0xaa, 0x89, 0xab, 0xc2, 0x4f, 0x00,
		0x00, 0x00, 0x1f, 0x8b, 0x08, 0x04, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xff, 0x06, 0x00, 0x42, 0x43,
		0x02, 0x00, 0xa2, 0x00, 0x9b, 0xc5, 0x00, 0x01,
		0xb3, 0xa5, 0x19, 0x18, 0xf8, 0x19, 0x3c, 0x85,
		0x18, 0x19, 0x18, 0x18, 0x25, 0x81, 0xfc, 0xff,
		0x50, 0x00, 0x92, 0x33, 0x34, 0x28, 0x30, 0x30,
		0xcc, 0x4a, 0x4b, 0xce, 0x53, 0x76, 0x76, 0x76,
		0x0f, 0x61, 0x98, 0x00, 0x54, 0x23, 0xd4, 0x01,
		0x05, 0x4a, 0x1d, 0x1d, 0x0d, 0xaa, 0xca, 0xca,
		0xca, 0x8a, 0xaa, 0xea, 0xea, 0xea, 0x1a, 0x9a,
		0x9a, 0x9a, 0x1a, 0x40, 0x52, 0x55, 0x59, 0x51,
		0x45, 0x55, 0x55, 0x45, 0xc9, 0x31, 0x38, 0xf9,
		0x77, 0x84, 0x9f, 0x33, 0x43, 0x84, 0xaf, 0x33,
		0x63, 0x84, 0x3f, 0x90, 0x76, 0x77, 0x66, 0xf0,
		0x03, 0xb2, 0x7d, 0x5d, 0xa2, 0x8c, 0x8c, 0x1d,
		0x0d, 0x19, 0x22, 0x43, 0xa2, 0x42, 0x43, 0x19,
		0xfc, 0x3c, 0x9c, 0x45, 0x9c, 0x9d, 0xa3, 0x92,
		0x33, 0x8a, 0x0c, 0x19, 0x9c, 0x03, 0x3c, 0xf7,
		0x9a, 0x3f, 0x67, 0x8a, 0x08, 0x76, 0xd4, 0xf6,
		0xf0, 0x74, 0x66, 0x00, 0x00, 0xa6, 0xdc, 0x77,
		0x77, 0x9e, 0x00, 0x00, 0x00, 0x1f, 0x8b, 0x08,
		0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x06,
		0x00, 0x42, 0x43, 0x02, 0x00, 0x1b, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00,
	}),

	// More general testing: sequence lengths range from 19 to 26 inclusive.
	bytes.NewReader([]byte{
		0x1f, 0x8b, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00,
		0x00, 0xff, 0x06, 0x00, 0x42, 0x43, 0x02, 0x00,
		0x61, 0x00, 0x73, 0x72, 0xf4, 0x65, 0x34, 0x62,
		0x60, 0x60, 0x70, 0xf0, 0x70, 0xe1, 0x0c, 0xf3,
		0xb3, 0x32, 0xd4, 0x33, 0xe0, 0x0c, 0xf6, 0xb7,
		0x4a, 0xce, 0xcf, 0x2f, 0x4a, 0xc9, 0xcc, 0x4b,
		0x2c, 0x49, 0xe5, 0x72, 0x08, 0x0e, 0xe4, 0x0c,
		0xf6, 0xb3, 0x8a, 0x2a, 0xb3, 0x8c, 0xf7, 0x73,
		0x34, 0x34, 0xe0, 0xf4, 0xf1, 0xb3, 0x32, 0xb1,
		0x30, 0x30, 0x33, 0xe2, 0x62, 0x04, 0xea, 0xe2,
		0x04, 0x62, 0x98, 0x0c, 0xc3, 0xbe, 0xdd, 0x0c,
		0x0c, 0x00, 0xaa, 0x89, 0xab, 0xc2, 0x4f, 0x00,
		0x00, 0x00, 0x1f, 0x8b, 0x08, 0x04, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xff, 0x06, 0x00, 0x42, 0x43,
		0x02, 0x00, 0x12, 0x01, 0x9b, 0xc8, 0x00, 0x01,
		0xb3, 0xa5, 0x19, 0x18, 0xf8, 0x19, 0x3c, 0x85,
		0x18, 0x19, 0x18, 0x18, 0x85, 0x81, 0xfc, 0xff,
		0x50, 0x00, 0x92, 0x33, 0x34, 0x28, 0x30, 0x30,
		0xcc, 0x4a, 0x4b, 0xce, 0x53, 0x76, 0x76, 0x76,
		0x0f, 0x61, 0x30, 0x00, 0xaa, 0x11, 0xea, 0x80,
		0x02, 0x05, 0x55, 0x65, 0x65, 0x65, 0x45, 0x55,
		0x75, 0x75, 0x75, 0x0d, 0x4d, 0x4d, 0x4d, 0x0d,
		0x20, 0xa9, 0xaa, 0xec, 0x18, 0x9c, 0xfc, 0x3b,
		0xc2, 0xcf, 0x99, 0x21, 0xc2, 0xd7, 0x99, 0x31,
		0xc2, 0x1f, 0x48, 0xbb, 0x3b, 0x33, 0xf8, 0x01,
		0xd9, 0xbe, 0x2e, 0x51, 0x46, 0xc6, 0x8e, 0x86,
		0x0c, 0x91, 0x21, 0x51, 0xa1, 0xa1, 0x0c, 0x7e,
		0x1e, 0xce, 0x22, 0xce, 0xce, 0x51, 0xc9, 0x19,
		0x45, 0x86, 0x0c, 0xce, 0x01, 0x9e, 0x7b, 0xcd,
		0x9f, 0x33, 0x45, 0x04, 0x3b, 0x6a, 0x7b, 0x78,
		0x3a, 0x33, 0x4c, 0xc2, 0xe2, 0x28, 0x11, 0xfc,
		0x8e, 0x72, 0x40, 0x76, 0x94, 0x12, 0x16, 0x47,
		0x29, 0x52, 0xec, 0xaa, 0x29, 0x58, 0x5c, 0x25,
		0x8a, 0xdf, 0x55, 0x01, 0x28, 0xae, 0x6a, 0xc0,
		0xe6, 0x2c, 0x15, 0x8a, 0xdd, 0x35, 0x15, 0x8b,
		0xbb, 0xc4, 0xf0, 0xbb, 0x2b, 0x01, 0xc5, 0x5d,
		0x1d, 0x58, 0xdd, 0xa5, 0x4a, 0xb1, 0xc3, 0xa6,
		0x63, 0x71, 0x98, 0x38, 0x7e, 0x87, 0x15, 0xa0,
		0x3a, 0x0c, 0x7b, 0x88, 0xa9, 0x52, 0xee, 0xb4,
		0x19, 0x58, 0x9c, 0x26, 0x81, 0xdf, 0x69, 0x0d,
		0xa8, 0x4e, 0xc3, 0x11, 0x68, 0xaa, 0x94, 0xc7,
		0xe7, 0x2c, 0x2c, 0x6e, 0x93, 0xc4, 0xef, 0xb6,
		0x09, 0x68, 0x6e, 0xc3, 0x15, 0x6e, 0x2a, 0x4a,
		0x14, 0xbb, 0x6e, 0x36, 0x16, 0xd7, 0x49, 0xe1,
		0x77, 0xdd, 0x02, 0x34, 0xd7, 0xe1, 0x0c, 0x3a,
		0x25, 0xca, 0x9d, 0x07, 0x00, 0x31, 0x91, 0x24,
		0x5a, 0xd0, 0x04, 0x00, 0x00, 0x1f, 0x8b, 0x08,
		0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x06,
		0x00, 0x42, 0x43, 0x02, 0x00, 0x1b, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00,
	}),
}

func (s *S) TestIssue11(c *check.C) {
	for _, test := range issue11 {
		br, err := NewReader(test.input)
		c.Check(err, check.Equals, nil)
		c.Check(br.Header().GroupOrder, check.Equals, test.expect)
	}
}

var issue11 = []struct {
	input  io.Reader
	expect GroupOrder
}{
	{
		// 1000 genomes file hand edited to reduce number of refs and reads;
		// no specified group ordering.
		input: bytes.NewReader([]byte{
			0x1f, 0x8b, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xff, 0x06, 0x00, 0x42, 0x43, 0x02, 0x00,
			0xec, 0x01, 0xad, 0x92, 0xcd, 0x8e, 0xda, 0x30,
			0x10, 0xc7, 0xb3, 0xdd, 0x93, 0x79, 0x8a, 0x1c,
			0x38, 0xb4, 0x07, 0x1c, 0xe7, 0xc3, 0x81, 0x58,
			0xaa, 0xc4, 0x97, 0x04, 0x48, 0x21, 0x9b, 0x12,
			0xd1, 0x6a, 0x4f, 0x91, 0x93, 0xd8, 0xc1, 0x5a,
			0xe3, 0x00, 0x0e, 0xd0, 0xf6, 0x0d, 0xfa, 0xc4,
			0xbd, 0x55, 0x35, 0xd1, 0xb6, 0x5d, 0xb5, 0x3d,
			0xee, 0xc1, 0x23, 0xfb, 0x3f, 0x33, 0xbf, 0x19,
			0xdb, 0x33, 0x9d, 0xac, 0xef, 0xb2, 0x7b, 0xcb,
			0x1a, 0x2f, 0xe7, 0xe0, 0x63, 0x42, 0x5c, 0x88,
			0x40, 0xf6, 0x40, 0xca, 0xa6, 0x39, 0x55, 0x42,
			0xd1, 0x96, 0xf5, 0xc6, 0xd9, 0x07, 0x90, 0x25,
			0xe4, 0x11, 0xc4, 0x09, 0xc1, 0x91, 0x3f, 0xf4,
			0x71, 0x18, 0x82, 0x35, 0x26, 0x2e, 0xa7, 0x7e,
			0x30, 0x0c, 0x86, 0x18, 0x51, 0x8e, 0xa2, 0x60,
			0x54, 0x54, 0x3c, 0x1a, 0x56, 0x98, 0x22, 0xc6,
			0xb0, 0xc7, 0xb0, 0x0b, 0xb6, 0x1b, 0xc2, 0xdb,
			0x03, 0x71, 0x1c, 0x63, 0xa1, 0x8b, 0x10, 0xaa,
			0x99, 0x6a, 0xf6, 0x4c, 0x43, 0x56, 0x08, 0x48,
			0x4b, 0x78, 0x7e, 0x72, 0x2e, 0x8d, 0x74, 0x6f,
			0x6e, 0xa7, 0x65, 0xe5, 0x4e, 0x89, 0x92, 0x4a,
			0xe7, 0xc4, 0x38, 0x3b, 0x31, 0x55, 0x32, 0xe7,
			0xb0, 0xa3, 0x9a, 0x79, 0xf9, 0x6f, 0x21, 0xa7,
			0x5a, 0xb3, 0x7d, 0x21, 0xbf, 0xe4, 0x9a, 0x1d,
			0xcf, 0x5d, 0xc8, 0x4e, 0xfb, 0xa6, 0x24, 0xe4,
			0x14, 0xd6, 0x5f, 0xc1, 0x24, 0x23, 0xc9, 0x6c,
			0xba, 0xf2, 0x87, 0x20, 0x4b, 0xc9, 0xf2, 0xbc,
			0xa7, 0xaa, 0x37, 0xde, 0x2c, 0xc0, 0x6a, 0x4e,
			0xb2, 0xcd, 0x06, 0x85, 0x5e, 0xe8, 0x07, 0x20,
			0x9e, 0x12, 0x6f, 0x14, 0xe0, 0x11, 0x0e, 0x47,
			0xd8, 0x5c, 0x74, 0x4d, 0x96, 0x0b, 0xd3, 0x58,
			0x14, 0x82, 0x74, 0x45, 0x3c, 0x14, 0x82, 0x59,
			0x42, 0x3e, 0x6d, 0x17, 0xd9, 0x0c, 0xa4, 0x31,
			0x59, 0xc5, 0xf1, 0x76, 0xbd, 0x4a, 0x26, 0x60,
			0x9e, 0x19, 0x42, 0x8a, 0x90, 0xeb, 0x45, 0xc1,
			0xdf, 0x48, 0xfc, 0xea, 0xc8, 0xc0, 0x7d, 0x0d,
			0x64, 0xda, 0x21, 0x8b, 0x2b, 0xcd, 0x85, 0xaa,
			0xd8, 0x67, 0x90, 0x26, 0xb7, 0xc3, 0xed, 0x87,
			0x11, 0xc4, 0x30, 0x1a, 0x9c, 0x5c, 0x83, 0x89,
			0x6f, 0x9a, 0xdd, 0x05, 0xd8, 0x03, 0x6a, 0x17,
			0xd7, 0x56, 0x5f, 0xed, 0xfe, 0x9f, 0x07, 0xe7,
			0x54, 0xb7, 0xf4, 0x25, 0x8b, 0x4a, 0xd5, 0x89,
			0xc7, 0x5f, 0xbc, 0x34, 0x7d, 0x51, 0xe3, 0x7f,
			0x70, 0x93, 0x61, 0x0f, 0x8e, 0xb6, 0x8b, 0xed,
			0x01, 0xb7, 0xfb, 0x9a, 0x8a, 0x9c, 0x0b, 0xc9,
			0xfe, 0x29, 0x62, 0xf7, 0x3b, 0x6c, 0xe7, 0xec,
			0x8d, 0x67, 0x0f, 0xa0, 0xff, 0xa4, 0x9a, 0xab,
			0xea, 0xc0, 0x52, 0x77, 0xf2, 0x5b, 0xfd, 0xce,
			0x7e, 0x6f, 0xbf, 0xc6, 0x44, 0xed, 0xe9, 0xe1,
			0x20, 0x54, 0x6d, 0x26, 0x4b, 0x37, 0xe7, 0x53,
			0xc9, 0xb4, 0x33, 0x89, 0x63, 0x78, 0xad, 0x35,
			0x7c, 0x2e, 0xb7, 0x17, 0xd2, 0xd8, 0x8a, 0x5d,
			0x84, 0x62, 0xf9, 0xae, 0x76, 0xa3, 0x5c, 0x32,
			0xde, 0x4e, 0xa4, 0xa8, 0x15, 0xab, 0xf2, 0xb2,
			0x91, 0x92, 0x1e, 0xb4, 0xd9, 0x55, 0xcd, 0xb9,
			0x90, 0x26, 0x42, 0xb4, 0xcf, 0x99, 0x50, 0x8b,
			0xd6, 0xb4, 0x73, 0x29, 0xb9, 0x19, 0xc8, 0xde,
			0x9d, 0x65, 0x59, 0x6f, 0xcc, 0x7a, 0xb4, 0x7e,
			0x7c, 0xff, 0x76, 0xff, 0x13, 0x01, 0xfd, 0x62,
			0x77, 0x69, 0x03, 0x00, 0x00, 0x1f, 0x8b, 0x08,
			0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x06,
			0x00, 0x42, 0x43, 0x02, 0x00, 0xcf, 0x00, 0x4d,
			0xce, 0x31, 0x6a, 0xc3, 0x30, 0x18, 0x05, 0x60,
			0x41, 0x0f, 0x50, 0xd2, 0x66, 0x30, 0x74, 0x88,
			0xab, 0x18, 0xeb, 0x59, 0xb2, 0xa5, 0xff, 0xb7,
			0xa9, 0x93, 0x8c, 0x32, 0x82, 0x6a, 0x76, 0xb6,
			0xce, 0x3d, 0x40, 0x2e, 0x90, 0x41, 0xc1, 0x83,
			0x73, 0xc1, 0xdc, 0xa4, 0x74, 0xad, 0x4b, 0xa0,
			0xf4, 0x5b, 0xde, 0xe3, 0x4d, 0xef, 0x26, 0xee,
			0xbe, 0xbe, 0xaf, 0x0f, 0xcf, 0xe2, 0x94, 0x0b,
			0x71, 0x16, 0x9f, 0xff, 0xb6, 0xdf, 0x3c, 0x8e,
			0x23, 0xf5, 0x6d, 0xdf, 0xbd, 0x59, 0x3e, 0xf4,
			0xdd, 0x6e, 0xdf, 0xb6, 0x62, 0xb8, 0xc8, 0xe8,
			0x63, 0x98, 0x57, 0x29, 0x44, 0x9f, 0xbc, 0x9c,
			0xa6, 0x4c, 0x66, 0xc5, 0x94, 0x45, 0xa4, 0x39,
			0xad, 0x83, 0x7f, 0x8a, 0x31, 0x0c, 0x4b, 0x0d,
			0x98, 0xb3, 0x20, 0xe1, 0xd7, 0xe9, 0x55, 0xe6,
			0x79, 0xfe, 0x52, 0xa0, 0xd2, 0xa5, 0xde, 0x42,
			0xab, 0x2d, 0x60, 0xea, 0x1a, 0xc6, 0x28, 0x65,
			0xa1, 0x01, 0xab, 0x6c, 0xa9, 0x50, 0x35, 0x0a,
			0x1b, 0xc7, 0xda, 0xb0, 0x61, 0xaa, 0x1d, 0xa1,
			0xd4, 0xa6, 0x65, 0x36, 0x64, 0xa0, 0x1c, 0x3b,
			0x66, 0x22, 0x76, 0x8e, 0xc8, 0x71, 0x45, 0x0b,
			0x0b, 0xba, 0xb3, 0x4d, 0xa3, 0xf1, 0x38, 0xbe,
			0x7f, 0xfc, 0x7d, 0x15, 0x3f, 0xf2, 0x15, 0x80,
			0x8f, 0xda, 0x00, 0x00, 0x00, 0x1f, 0x8b, 0x08,
			0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x06,
			0x00, 0x42, 0x43, 0x02, 0x00, 0x1b, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00,
		}),
		expect: GroupUnspecified,
	},
	{
		input: bytes.NewReader([]byte{
			0x1f, 0x8b, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xff, 0x06, 0x00, 0x42, 0x43, 0x02, 0x00,
			0xf3, 0x01, 0xad, 0x92, 0xcd, 0x8e, 0xda, 0x30,
			0x10, 0xc7, 0xb3, 0xdd, 0x93, 0x79, 0x8a, 0x1c,
			0x38, 0xb4, 0x07, 0x1c, 0xe7, 0xc3, 0x81, 0x58,
			0xaa, 0xc4, 0x97, 0x04, 0x48, 0x21, 0xa4, 0x44,
			0xb4, 0x5a, 0xf5, 0x10, 0x39, 0x89, 0x13, 0xac,
			0x35, 0x0e, 0xe0, 0x00, 0xdb, 0xbe, 0xc1, 0x3e,
			0xf1, 0xde, 0xaa, 0x9a, 0x68, 0xdb, 0xae, 0xda,
			0x1e, 0x39, 0x78, 0x64, 0xff, 0x67, 0xe6, 0x37,
			0x63, 0x7b, 0xc6, 0xa3, 0xe5, 0xdd, 0xd7, 0x7b,
			0xc3, 0x18, 0xce, 0xa7, 0xe0, 0x73, 0x44, 0x6c,
			0x88, 0x40, 0xb2, 0x22, 0x79, 0x5d, 0x1f, 0x0b,
			0x2e, 0x69, 0xc3, 0xc0, 0x6c, 0x45, 0x64, 0x2d,
			0x59, 0x67, 0x98, 0x7c, 0x02, 0x49, 0x44, 0x1e,
			0x40, 0x18, 0x11, 0x1c, 0xb8, 0x7d, 0x17, 0xfb,
			0x3e, 0x58, 0x62, 0x62, 0x97, 0xd4, 0xf5, 0xfa,
			0x5e, 0x1f, 0x23, 0x5a, 0xa2, 0xc0, 0x1b, 0x64,
			0x45, 0x19, 0xf4, 0x0b, 0x4c, 0x11, 0x63, 0xd8,
			0x61, 0xd8, 0x06, 0x9b, 0x35, 0x29, 0x9b, 0x3d,
			0xb1, 0x2c, 0x6d, 0xa1, 0x8d, 0x10, 0xaa, 0x98,
			0xac, 0x77, 0x4c, 0x41, 0x96, 0x71, 0x48, 0x73,
			0x78, 0x7a, 0xb4, 0xce, 0xb5, 0xb0, 0xaf, 0x6e,
			0xab, 0x61, 0xf9, 0x56, 0xf2, 0x9c, 0x0a, 0xeb,
			0xc8, 0x4a, 0x76, 0x64, 0x32, 0x67, 0xd6, 0x7e,
			0x4b, 0x15, 0x73, 0xd2, 0xdf, 0x42, 0x4a, 0x95,
			0x62, 0xbb, 0x4c, 0x7c, 0x4b, 0x15, 0x3b, 0x9c,
			0xda, 0x90, 0xad, 0x72, 0x75, 0x49, 0x58, 0x52,
			0x58, 0x7d, 0x07, 0xa3, 0x84, 0x44, 0x93, 0xf1,
			0xc2, 0xed, 0x83, 0x24, 0x26, 0xf3, 0xd3, 0x8e,
			0xca, 0xce, 0x70, 0x3d, 0x03, 0x8b, 0x29, 0x49,
			0xd6, 0x6b, 0xe4, 0x3b, 0xbe, 0xeb, 0x81, 0x70,
			0x4c, 0x9c, 0x81, 0x87, 0x07, 0xd8, 0x1f, 0x60,
			0x7d, 0xe1, 0x25, 0x99, 0xcf, 0x74, 0x63, 0x81,
			0x0f, 0xe2, 0x05, 0x71, 0x90, 0x0f, 0x26, 0x11,
			0xf9, 0xb2, 0x99, 0x25, 0x13, 0x10, 0x87, 0x64,
			0x11, 0x86, 0x9b, 0xe5, 0x22, 0x1a, 0x81, 0x69,
			0xa2, 0x09, 0x31, 0x42, 0xb6, 0x13, 0x78, 0x7f,
			0x23, 0xf1, 0xcd, 0x91, 0x9e, 0x7d, 0x0b, 0x64,
			0xdc, 0x22, 0xb3, 0x0b, 0x4d, 0xb9, 0x2c, 0xd8,
			0x13, 0x88, 0xa3, 0xeb, 0xe1, 0xfa, 0xd3, 0x08,
			0x62, 0x18, 0xf4, 0x8e, 0xb6, 0xc6, 0x84, 0x57,
			0xcd, 0x6c, 0x03, 0xcc, 0x1e, 0x35, 0xb3, 0x4b,
			0xa3, 0x2e, 0x66, 0xf7, 0xcf, 0x83, 0x97, 0x54,
			0x35, 0xf4, 0x2d, 0x8b, 0x0a, 0xd9, 0x8a, 0x87,
			0x5f, 0xbc, 0x38, 0x7e, 0x53, 0xe3, 0x7f, 0x70,
			0x9d, 0x61, 0xf6, 0x0e, 0xa6, 0x8d, 0xcd, 0x5e,
			0x69, 0x76, 0x15, 0xe5, 0x69, 0xc9, 0x05, 0xfb,
			0xa7, 0x88, 0xd9, 0x6d, 0xb1, 0xad, 0xb3, 0x33,
			0x9c, 0xac, 0x40, 0xf7, 0x51, 0xd6, 0x17, 0xd9,
			0x82, 0x85, 0x6a, 0xe5, 0xf7, 0xea, 0x83, 0xf9,
			0xd1, 0xbc, 0xc5, 0x44, 0xed, 0xe8, 0x7e, 0xcf,
			0x65, 0xa5, 0x27, 0x4b, 0xd5, 0xa7, 0x63, 0xce,
			0x94, 0x35, 0x0a, 0x43, 0x78, 0xa9, 0x14, 0x7c,
			0x2d, 0xb7, 0xe3, 0x42, 0xdb, 0x82, 0x9d, 0xb9,
			0x64, 0xe9, 0xb6, 0xb2, 0x83, 0x54, 0xb0, 0xb2,
			0x19, 0x09, 0x5e, 0x49, 0x56, 0xa4, 0x79, 0x2d,
			0x04, 0xdd, 0x2b, 0xbd, 0x2b, 0xea, 0x53, 0x26,
			0x74, 0x04, 0x6f, 0x5e, 0x33, 0xa1, 0xe2, 0x8d,
			0x6e, 0xe7, 0x9c, 0x97, 0x7a, 0x20, 0x3b, 0x77,
			0x86, 0x61, 0xbc, 0xd3, 0xeb, 0xc1, 0xf8, 0xf1,
			0xf2, 0x7c, 0xff, 0x13, 0x5a, 0x38, 0x56, 0x0a,
			0x71, 0x03, 0x00, 0x00, 0x1f, 0x8b, 0x08, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x06, 0x00,
			0x42, 0x43, 0x02, 0x00, 0xcf, 0x00, 0x4d, 0xce,
			0x31, 0x6a, 0xc3, 0x30, 0x18, 0x05, 0x60, 0x41,
			0x0f, 0x50, 0xd2, 0x66, 0x30, 0x74, 0x88, 0xab,
			0x18, 0xeb, 0x59, 0xb2, 0xa5, 0xff, 0xb7, 0xa9,
			0x93, 0x8c, 0x32, 0x82, 0x6a, 0x76, 0xb6, 0xce,
			0x3d, 0x40, 0x2e, 0x90, 0x41, 0xc1, 0x83, 0x73,
			0xc1, 0xdc, 0xa4, 0x74, 0xad, 0x4b, 0xa0, 0xf4,
			0x5b, 0xde, 0xe3, 0x4d, 0xef, 0x26, 0xee, 0xbe,
			0xbe, 0xaf, 0x0f, 0xcf, 0xe2, 0x94, 0x0b, 0x71,
			0x16, 0x9f, 0xff, 0xb6, 0xdf, 0x3c, 0x8e, 0x23,
			0xf5, 0x6d, 0xdf, 0xbd, 0x59, 0x3e, 0xf4, 0xdd,
			0x6e, 0xdf, 0xb6, 0x62, 0xb8, 0xc8, 0xe8, 0x63,
			0x98, 0x57, 0x29, 0x44, 0x9f, 0xbc, 0x9c, 0xa6,
			0x4c, 0x66, 0xc5, 0x94, 0x45, 0xa4, 0x39, 0xad,
			0x83, 0x7f, 0x8a, 0x31, 0x0c, 0x4b, 0x0d, 0x98,
			0xb3, 0x20, 0xe1, 0xd7, 0xe9, 0x55, 0xe6, 0x79,
			0xfe, 0x52, 0xa0, 0xd2, 0xa5, 0xde, 0x42, 0xab,
			0x2d, 0x60, 0xea, 0x1a, 0xc6, 0x28, 0x65, 0xa1,
			0x01, 0xab, 0x6c, 0xa9, 0x50, 0x35, 0x0a, 0x1b,
			0xc7, 0xda, 0xb0, 0x61, 0xaa, 0x1d, 0xa1, 0xd4,
			0xa6, 0x65, 0x36, 0x64, 0xa0, 0x1c, 0x3b, 0x66,
			0x22, 0x76, 0x8e, 0xc8, 0x71, 0x45, 0x0b, 0x0b,
			0xba, 0xb3, 0x4d, 0xa3, 0xf1, 0x38, 0xbe, 0x7f,
			0xfc, 0x7d, 0x15, 0x3f, 0xf2, 0x15, 0x80, 0x8f,
			0xda, 0x00, 0x00, 0x00, 0x1f, 0x8b, 0x08, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x06, 0x00,
			0x42, 0x43, 0x02, 0x00, 0x1b, 0x00, 0x03, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		}),
		expect: GroupNone,
	},
	{
		input: bytes.NewReader([]byte{
			0x1f, 0x8b, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xff, 0x06, 0x00, 0x42, 0x43, 0x02, 0x00,
			0xf5, 0x01, 0xad, 0x92, 0xcb, 0x8e, 0xda, 0x30,
			0x14, 0x86, 0x33, 0x9d, 0x95, 0x79, 0x8a, 0x2c,
			0x58, 0xb4, 0x0b, 0x1c, 0xe7, 0xe2, 0x40, 0x2c,
			0x55, 0xe2, 0x26, 0x01, 0x52, 0x08, 0x29, 0x11,
			0xad, 0x46, 0xaa, 0x14, 0x39, 0x89, 0x13, 0xac,
			0x31, 0x0e, 0x13, 0x07, 0xe8, 0xf4, 0x0d, 0xfa,
			0xc4, 0xdd, 0x55, 0x35, 0xd1, 0xb4, 0x1d, 0xb5,
			0x5d, 0xb2, 0xf0, 0x91, 0x7d, 0x2e, 0xdf, 0x7f,
			0x6c, 0x9f, 0xe9, 0x64, 0x7d, 0xf7, 0xf9, 0xde,
			0x30, 0xc6, 0xcb, 0x39, 0xf8, 0x18, 0x11, 0x1b,
			0x22, 0x90, 0x6c, 0x48, 0x5e, 0xd7, 0x4d, 0xc1,
			0x25, 0x6d, 0x19, 0x58, 0x6c, 0xc8, 0xd3, 0x89,
			0x35, 0xcf, 0xbd, 0x71, 0xf2, 0x01, 0x24, 0x11,
			0x79, 0x00, 0x61, 0x44, 0x70, 0xe0, 0x0e, 0x5d,
			0xec, 0xfb, 0x60, 0x8d, 0x89, 0x5d, 0x52, 0xd7,
			0x1b, 0x7a, 0x43, 0x8c, 0x68, 0x89, 0x02, 0x6f,
			0x94, 0x15, 0x65, 0x30, 0x2c, 0x30, 0x45, 0x8c,
			0x61, 0x87, 0x61, 0x1b, 0xec, 0xb6, 0xa4, 0x6c,
			0x8f, 0xc4, 0xb2, 0xb4, 0x85, 0x36, 0x42, 0xa8,
			0x62, 0xb2, 0x3e, 0x30, 0x05, 0x59, 0xc6, 0x21,
			0xcd, 0xe1, 0xe9, 0xd1, 0x3a, 0xd7, 0xc2, 0xbe,
			0x86, 0xad, 0x96, 0xe5, 0x7b, 0xc9, 0x73, 0x2a,
			0xac, 0x86, 0x95, 0xac, 0x61, 0x32, 0x67, 0xd6,
			0x71, 0x4f, 0x15, 0x73, 0xd2, 0xdf, 0x8e, 0x94,
			0x2a, 0xc5, 0x0e, 0x99, 0x78, 0x4e, 0x15, 0xd3,
			0xad, 0x5d, 0x53, 0xf6, 0xca, 0xd5, 0x92, 0xb0,
			0xa4, 0xb0, 0xfa, 0x0a, 0x26, 0x09, 0x89, 0x66,
			0xd3, 0x95, 0x3b, 0x04, 0x49, 0x4c, 0x96, 0xa7,
			0x03, 0x95, 0xbd, 0xf1, 0x76, 0x01, 0x56, 0x73,
			0x92, 0x6c, 0xb7, 0xc8, 0x77, 0x7c, 0xd7, 0x03,
			0xe1, 0x94, 0x38, 0x23, 0x0f, 0x8f, 0xb0, 0x3f,
			0xc2, 0xfa, 0xc6, 0x6b, 0xb2, 0x5c, 0xe8, 0xc6,
			0x02, 0x1f, 0xc4, 0x2b, 0xe2, 0x20, 0x1f, 0xcc,
			0x22, 0xf2, 0x69, 0xb7, 0x48, 0x66, 0x20, 0x0e,
			0xc9, 0x2a, 0x0c, 0x77, 0xeb, 0x55, 0x34, 0x01,
			0xf3, 0x44, 0x13, 0x62, 0x84, 0x6c, 0x27, 0xf0,
			0xfe, 0x46, 0xe2, 0x9b, 0x23, 0x3d, 0xfb, 0x16,
			0xc8, 0xb8, 0x43, 0x66, 0x17, 0x9a, 0x72, 0x59,
			0xb0, 0x2f, 0x20, 0x8e, 0xae, 0x87, 0xeb, 0x57,
			0x23, 0x88, 0x61, 0x30, 0x68, 0x6c, 0x8d, 0x09,
			0xaf, 0x3e, 0xb3, 0x4b, 0x30, 0x07, 0xd4, 0xcc,
			0x2e, 0xad, 0xba, 0x98, 0xfd, 0x3f, 0x0f, 0x5e,
			0x52, 0xd5, 0xd2, 0xd7, 0x2c, 0x2a, 0x64, 0xe7,
			0x7c, 0xfa, 0xc5, 0x8b, 0xe3, 0x57, 0x1a, 0xff,
			0x83, 0xeb, 0x0a, 0x73, 0xf0, 0x64, 0xda, 0xd8,
			0x1c, 0x94, 0x66, 0x5f, 0x51, 0x9e, 0x96, 0x5c,
			0xb0, 0x7f, 0x44, 0xcc, 0x7e, 0x87, 0xed, 0x82,
			0xbd, 0xf1, 0x6c, 0x03, 0xfa, 0x8f, 0xb2, 0xbe,
			0xc8, 0x0e, 0x2c, 0x54, 0xe7, 0x7e, 0xab, 0xde,
			0x99, 0xef, 0xcd, 0x5b, 0x4c, 0xd4, 0x81, 0x1e,
			0x8f, 0x5c, 0x56, 0x7a, 0xb2, 0x54, 0x7d, 0x6a,
			0x72, 0xa6, 0xac, 0x49, 0x18, 0xc2, 0x4b, 0xa5,
			0xe0, 0x8b, 0xdc, 0x81, 0x0b, 0x6d, 0x0b, 0x76,
			0xe6, 0x92, 0xa5, 0xfb, 0xca, 0x0e, 0x52, 0xc1,
			0xca, 0x76, 0x22, 0x78, 0x25, 0x59, 0x91, 0xe6,
			0xb5, 0x10, 0xf4, 0xa8, 0xf4, 0xae, 0xa8, 0x4f,
			0x99, 0xd0, 0x19, 0xbc, 0x7d, 0xa9, 0x84, 0x8a,
			0xb7, 0xba, 0x9d, 0x73, 0x5e, 0xea, 0x81, 0xec,
			0xdd, 0x19, 0x86, 0xf1, 0x46, 0xaf, 0x07, 0xe3,
			0xc7, 0xf7, 0x6f, 0xf7, 0x3f, 0x01, 0x63, 0x09,
			0x85, 0xc2, 0x72, 0x03, 0x00, 0x00, 0x1f, 0x8b,
			0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
			0x06, 0x00, 0x42, 0x43, 0x02, 0x00, 0xcf, 0x00,
			0x4d, 0xce, 0x31, 0x6a, 0xc3, 0x30, 0x18, 0x05,
			0x60, 0x41, 0x0f, 0x50, 0xd2, 0x66, 0x30, 0x74,
			0x88, 0xab, 0x18, 0xeb, 0x59, 0xb2, 0xa5, 0xff,
			0xb7, 0xa9, 0x93, 0x8c, 0x32, 0x82, 0x6a, 0x76,
			0xb6, 0xce, 0x3d, 0x40, 0x2e, 0x90, 0x41, 0xc1,
			0x83, 0x73, 0xc1, 0xdc, 0xa4, 0x74, 0xad, 0x4b,
			0xa0, 0xf4, 0x5b, 0xde, 0xe3, 0x4d, 0xef, 0x26,
			0xee, 0xbe, 0xbe, 0xaf, 0x0f, 0xcf, 0xe2, 0x94,
			0x0b, 0x71, 0x16, 0x9f, 0xff, 0xb6, 0xdf, 0x3c,
			0x8e, 0x23, 0xf5, 0x6d, 0xdf, 0xbd, 0x59, 0x3e,
			0xf4, 0xdd, 0x6e, 0xdf, 0xb6, 0x62, 0xb8, 0xc8,
			0xe8, 0x63, 0x98, 0x57, 0x29, 0x44, 0x9f, 0xbc,
			0x9c, 0xa6, 0x4c, 0x66, 0xc5, 0x94, 0x45, 0xa4,
			0x39, 0xad, 0x83, 0x7f, 0x8a, 0x31, 0x0c, 0x4b,
			0x0d, 0x98, 0xb3, 0x20, 0xe1, 0xd7, 0xe9, 0x55,
			0xe6, 0x79, 0xfe, 0x52, 0xa0, 0xd2, 0xa5, 0xde,
			0x42, 0xab, 0x2d, 0x60, 0xea, 0x1a, 0xc6, 0x28,
			0x65, 0xa1, 0x01, 0xab, 0x6c, 0xa9, 0x50, 0x35,
			0x0a, 0x1b, 0xc7, 0xda, 0xb0, 0x61, 0xaa, 0x1d,
			0xa1, 0xd4, 0xa6, 0x65, 0x36, 0x64, 0xa0, 0x1c,
			0x3b, 0x66, 0x22, 0x76, 0x8e, 0xc8, 0x71, 0x45,
			0x0b, 0x0b, 0xba, 0xb3, 0x4d, 0xa3, 0xf1, 0x38,
			0xbe, 0x7f, 0xfc, 0x7d, 0x15, 0x3f, 0xf2, 0x15,
			0x80, 0x8f, 0xda, 0x00, 0x00, 0x00, 0x1f, 0x8b,
			0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
			0x06, 0x00, 0x42, 0x43, 0x02, 0x00, 0x1b, 0x00,
			0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00,
		}),
		expect: GroupQuery,
	},
	{
		input: bytes.NewReader([]byte{
			0x1f, 0x8b, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xff, 0x06, 0x00, 0x42, 0x43, 0x02, 0x00,
			0xf1, 0x01, 0xad, 0x92, 0xcb, 0x8e, 0xda, 0x30,
			0x14, 0x86, 0x33, 0x9d, 0x95, 0x79, 0x8a, 0x2c,
			0x58, 0xb4, 0x0b, 0x1c, 0xe7, 0xe2, 0x40, 0x2c,
			0x55, 0xe2, 0x26, 0x01, 0x52, 0x08, 0x29, 0x11,
			0xad, 0x66, 0x95, 0x3a, 0x89, 0x13, 0xac, 0x31,
			0x0e, 0xe0, 0x00, 0x6d, 0xdf, 0xa0, 0x4f, 0x3c,
			0xbb, 0x51, 0x4d, 0x34, 0x9d, 0x8e, 0xda, 0x2e,
			0x59, 0xf8, 0xc8, 0x3e, 0x97, 0xef, 0x3f, 0xb6,
			0xcf, 0x78, 0xb4, 0xbc, 0xfb, 0x7a, 0x6f, 0x18,
			0xc3, 0xf9, 0x14, 0x7c, 0x8e, 0x88, 0x0d, 0x11,
			0x48, 0x56, 0x24, 0xaf, 0xeb, 0x63, 0xc1, 0x25,
			0x6d, 0x18, 0x98, 0xad, 0xc8, 0x91, 0x95, 0xec,
			0xc8, 0x64, 0xce, 0x3a, 0xc3, 0xe4, 0x13, 0x48,
			0x22, 0xf2, 0x00, 0xc2, 0x88, 0xe0, 0xc0, 0xed,
			0xbb, 0xd8, 0xf7, 0xc1, 0x12, 0x13, 0xbb, 0xa4,
			0xae, 0xd7, 0xf7, 0xfa, 0x18, 0xd1, 0x12, 0x05,
			0xde, 0x20, 0x2b, 0xca, 0xa0, 0x5f, 0x60, 0x8a,
			0x18, 0xc3, 0x0e, 0xc3, 0x36, 0xd8, 0xac, 0x49,
			0xd9, 0xec, 0x89, 0x65, 0x69, 0x0b, 0x6d, 0x84,
			0x50, 0xc5, 0x64, 0xbd, 0x63, 0x0a, 0xb2, 0x8c,
			0x43, 0x9a, 0xc3, 0xd3, 0xa3, 0x75, 0xae, 0x85,
			0x7d, 0x0d, 0x5b, 0x0d, 0xcb, 0xb7, 0x92, 0xe7,
			0x54, 0x58, 0xaf, 0xc2, 0xd6, 0x7e, 0x4b, 0x15,
			0x73, 0xd2, 0x57, 0x47, 0x4a, 0x95, 0x62, 0xbb,
			0x4c, 0x7c, 0x4f, 0x15, 0x3b, 0x9c, 0xda, 0x94,
			0xad, 0x72, 0xb5, 0x24, 0x2c, 0x29, 0xac, 0x7e,
			0x80, 0x51, 0x42, 0xa2, 0xc9, 0x78, 0xe1, 0xf6,
			0x41, 0x12, 0x93, 0xf9, 0x69, 0x47, 0x65, 0x67,
			0xb8, 0x9e, 0x81, 0xc5, 0x94, 0x24, 0xeb, 0x35,
			0xf2, 0x1d, 0xdf, 0xf5, 0x40, 0x38, 0x26, 0xce,
			0xc0, 0xc3, 0x03, 0xec, 0x0f, 0xb0, 0xbe, 0xf5,
			0x92, 0xcc, 0x67, 0xba, 0xb1, 0xc0, 0x07, 0xf1,
			0x82, 0x38, 0xc8, 0x07, 0x93, 0x88, 0x7c, 0xd9,
			0xcc, 0x92, 0x09, 0x88, 0x43, 0xb2, 0x08, 0xc3,
			0xcd, 0x72, 0x11, 0x8d, 0xc0, 0x34, 0xd1, 0x84,
			0x18, 0x21, 0xdb, 0x09, 0xbc, 0xbf, 0x91, 0xf8,
			0xe6, 0x48, 0xcf, 0xbe, 0x05, 0x32, 0x6e, 0x91,
			0xd9, 0x85, 0xa6, 0x5c, 0x16, 0xec, 0x1b, 0x88,
			0xa3, 0xeb, 0xe1, 0xfa, 0xdd, 0x08, 0x62, 0x18,
			0xf4, 0x8e, 0xb6, 0xc6, 0x84, 0x57, 0x9f, 0xd9,
			0x26, 0x98, 0x3d, 0x6a, 0x66, 0x97, 0x46, 0x5d,
			0xcc, 0xee, 0x9f, 0x07, 0x2f, 0xa9, 0x6a, 0xe8,
			0x5b, 0x16, 0x15, 0xb2, 0x75, 0x1e, 0x7e, 0xf3,
			0xe2, 0xf8, 0x8d, 0xc6, 0xff, 0xe0, 0xba, 0xc2,
			0xec, 0x1d, 0x4c, 0x1b, 0x9b, 0xbd, 0xd2, 0xec,
			0x2a, 0xca, 0xd3, 0x92, 0x0b, 0xf6, 0x8f, 0x88,
			0xd9, 0x6d, 0xb1, 0x6d, 0xb0, 0x33, 0x9c, 0xac,
			0x40, 0xf7, 0x51, 0xd6, 0x17, 0xd9, 0x82, 0x85,
			0x6a, 0xdd, 0xef, 0xd5, 0x07, 0xf3, 0xa3, 0x79,
			0x8b, 0x89, 0xda, 0xd1, 0xfd, 0x9e, 0xcb, 0x4a,
			0x4f, 0x96, 0xaa, 0x4f, 0xc7, 0x9c, 0x29, 0x6b,
			0x14, 0x86, 0xf0, 0x52, 0x29, 0xf8, 0x22, 0xb7,
			0xe3, 0x42, 0xdb, 0x82, 0x9d, 0xb9, 0x64, 0xe9,
			0xb6, 0xb2, 0x83, 0x54, 0xb0, 0xb2, 0x19, 0x09,
			0x5e, 0x49, 0x56, 0xa4, 0x79, 0x2d, 0x04, 0xdd,
			0x2b, 0xbd, 0x2b, 0xea, 0x53, 0x26, 0x74, 0x06,
			0x6f, 0x5e, 0x2a, 0xa1, 0xe2, 0x8d, 0x6e, 0xe7,
			0x9c, 0x97, 0x7a, 0x20, 0x3b, 0x77, 0x86, 0x61,
			0xbc, 0xd3, 0xeb, 0xc1, 0x78, 0x7e, 0xfa, 0x79,
			0xff, 0x0b, 0xf6, 0x33, 0x1f, 0x79, 0x76, 0x03,
			0x00, 0x00, 0x1f, 0x8b, 0x08, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xff, 0x06, 0x00, 0x42, 0x43,
			0x02, 0x00, 0xcf, 0x00, 0x4d, 0xce, 0x31, 0x6a,
			0xc3, 0x30, 0x18, 0x05, 0x60, 0x41, 0x0f, 0x50,
			0xd2, 0x66, 0x30, 0x74, 0x88, 0xab, 0x18, 0xeb,
			0x59, 0xb2, 0xa5, 0xff, 0xb7, 0xa9, 0x93, 0x8c,
			0x32, 0x82, 0x6a, 0x76, 0xb6, 0xce, 0x3d, 0x40,
			0x2e, 0x90, 0x41, 0xc1, 0x83, 0x73, 0xc1, 0xdc,
			0xa4, 0x74, 0xad, 0x4b, 0xa0, 0xf4, 0x5b, 0xde,
			0xe3, 0x4d, 0xef, 0x26, 0xee, 0xbe, 0xbe, 0xaf,
			0x0f, 0xcf, 0xe2, 0x94, 0x0b, 0x71, 0x16, 0x9f,
			0xff, 0xb6, 0xdf, 0x3c, 0x8e, 0x23, 0xf5, 0x6d,
			0xdf, 0xbd, 0x59, 0x3e, 0xf4, 0xdd, 0x6e, 0xdf,
			0xb6, 0x62, 0xb8, 0xc8, 0xe8, 0x63, 0x98, 0x57,
			0x29, 0x44, 0x9f, 0xbc, 0x9c, 0xa6, 0x4c, 0x66,
			0xc5, 0x94, 0x45, 0xa4, 0x39, 0xad, 0x83, 0x7f,
			0x8a, 0x31, 0x0c, 0x4b, 0x0d, 0x98, 0xb3, 0x20,
			0xe1, 0xd7, 0xe9, 0x55, 0xe6, 0x79, 0xfe, 0x52,
			0xa0, 0xd2, 0xa5, 0xde, 0x42, 0xab, 0x2d, 0x60,
			0xea, 0x1a, 0xc6, 0x28, 0x65, 0xa1, 0x01, 0xab,
			0x6c, 0xa9, 0x50, 0x35, 0x0a, 0x1b, 0xc7, 0xda,
			0xb0, 0x61, 0xaa, 0x1d, 0xa1, 0xd4, 0xa6, 0x65,
			0x36, 0x64, 0xa0, 0x1c, 0x3b, 0x66, 0x22, 0x76,
			0x8e, 0xc8, 0x71, 0x45, 0x0b, 0x0b, 0xba, 0xb3,
			0x4d, 0xa3, 0xf1, 0x38, 0xbe, 0x7f, 0xfc, 0x7d,
			0x15, 0x3f, 0xf2, 0x15, 0x80, 0x8f, 0xda, 0x00,
			0x00, 0x00, 0x1f, 0x8b, 0x08, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xff, 0x06, 0x00, 0x42, 0x43,
			0x02, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		}),
		expect: GroupReference,
	},
}
